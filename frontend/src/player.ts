import { Track } from './api';

export class DJPlayer {
  private ctx: AudioContext;
  private gainA: GainNode;
  private gainB: GainNode;
  private currentIndex = 0;
  private fadeDuration = 5; // —Å–µ–∫—É–Ω–¥—ã
  private isPlaying = false;
  private tracks: Track[] = [];
  private onTrackChange?: (track: Track, index: number) => void;

  constructor() {
    this.ctx = new AudioContext();
    this.gainA = this.ctx.createGain();
    this.gainB = this.ctx.createGain();
    
    this.gainA.connect(this.ctx.destination);
    this.gainB.connect(this.ctx.destination);
  }

  setFadeDuration(seconds: number) {
    this.fadeDuration = seconds;
  }

  setOnTrackChange(callback: (track: Track, index: number) => void) {
    this.onTrackChange = callback;
  }

  async play(tracks: Track[]) {
    this.tracks = tracks;
    this.currentIndex = 0;
    this.isPlaying = true;
    
    if (tracks.length === 0) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AudioContext
    if (this.ctx.state === 'suspended') {
      console.log('üîä –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AudioContext...');
      await this.ctx.resume();
    }
    
    console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', tracks.length, '—Ç—Ä–µ–∫–æ–≤');
    await this.playNext();
  }

  stop() {
    this.isPlaying = false;
    this.ctx.close();
  }

  private async playNext() {
    if (!this.isPlaying || this.currentIndex >= this.tracks.length) {
      console.log('üõë –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ —Ç—Ä–µ–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
      this.isPlaying = false;
      return;
    }

    const currentTrack = this.tracks[this.currentIndex];
    const nextTrack = this.tracks[this.currentIndex + 1];

    console.log(`üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ ${this.currentIndex + 1}/${this.tracks.length}:`, currentTrack.title);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
      const bufferA = await this.loadAudio(currentTrack.url);
      const sourceA = this.ctx.createBufferSource();
      sourceA.buffer = bufferA;
      sourceA.connect(this.gainA);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
      if (this.onTrackChange) {
        this.onTrackChange(currentTrack, this.currentIndex);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
      sourceA.start();
      this.gainA.gain.setValueAtTime(1, this.ctx.currentTime);
      console.log('‚ñ∂Ô∏è –¢—Ä–µ–∫ –∑–∞–ø—É—â–µ–Ω');

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫, –≥–æ—Ç–æ–≤–∏–º –∫—Ä–æ—Å—Å—Ñ–µ–π–¥
      if (nextTrack && this.isPlaying) {
        console.log('üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–æ—Å—Å—Ñ–µ–π–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É');
        const bufferB = await this.loadAudio(nextTrack.url);
        const sourceB = this.ctx.createBufferSource();
        sourceB.buffer = bufferB;
        sourceB.connect(this.gainB);

        // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞
        const fadeStartTime = this.ctx.currentTime + bufferA.duration - this.fadeDuration;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        sourceB.start(fadeStartTime);
        this.gainB.gain.setValueAtTime(0, fadeStartTime);
        this.gainB.gain.linearRampToValueAtTime(1, fadeStartTime + this.fadeDuration);

        // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
        this.gainA.gain.linearRampToValueAtTime(0, fadeStartTime + this.fadeDuration);

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        setTimeout(() => {
          this.currentIndex++;
          this.playNext();
        }, (bufferA.duration - this.fadeDuration) * 1000);
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫ - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
        setTimeout(() => {
          this.currentIndex++;
          this.playNext();
        }, bufferA.duration * 1000);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error);
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫
      this.currentIndex++;
      setTimeout(() => this.playNext(), 1000);
    }
  }

  private async loadAudio(url: string): Promise<AudioBuffer> {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ:', url);
    try {
      const response = await fetch(url);
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const arrayBuffer = await response.arrayBuffer();
      console.log('üì¶ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö:', arrayBuffer.byteLength, '–±–∞–π—Ç');
      
      const audioBuffer = await this.ctx.decodeAudioData(arrayBuffer);
      console.log('‚úÖ –ê—É–¥–∏–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ:', audioBuffer.duration, '—Å–µ–∫—É–Ω–¥');
      
      return audioBuffer;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ:', error);
      throw error;
    }
  }

  getCurrentTrack(): Track | null {
    if (this.currentIndex < this.tracks.length) {
      return this.tracks[this.currentIndex];
    }
    return null;
  }

  getProgress(): number {
    return this.currentIndex / this.tracks.length;
  }

  isCurrentlyPlaying(): boolean {
    return this.isPlaying;
  }
} 