from yandex_music import Client
from typing import List
from models import Track
import requests

class YandexMusicClient:
    def __init__(self, token: str):
        self.client = Client(token).init()
    
    def get_best_quality_url(self, download_info) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –±–∏—Ç—Ä–µ–π—Ç—É"""
        if not download_info:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∏—Ç—Ä–µ–π—Ç—É (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã–º)
        sorted_info = sorted(download_info, key=lambda x: x.bitrate_in_kbps, reverse=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
        print(f"  üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:")
        for i, info in enumerate(sorted_info):
            print(f"    {i}: {info.bitrate_in_kbps}kbps, {info.codec}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        best_url = sorted_info[0].get_direct_link()
        print(f"  ‚úÖ –í—ã–±—Ä–∞–Ω–æ: {sorted_info[0].bitrate_in_kbps}kbps")
        return best_url
    
    def fetch_tracks_universal(self, source_id: str) -> List[Track]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            tracks = []
            
            # "–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è"
            if source_id.lower() == "liked":
                return self.fetch_liked_tracks()
            
            # –ê–ª—å–±–æ–º (—á–∏—Å–ª–æ–≤–æ–π ID)
            if source_id.isdigit():
                return self.fetch_album_tracks(source_id)
            
            # –ü–ª–µ–π–ª–∏—Å—Ç (—á–∏—Å–ª–æ–≤–æ–π ID)
            if source_id.isdigit():
                return self.fetch_playlist_tracks(source_id)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç (lk.xxx)
            if source_id.startswith("lk."):
                return self.fetch_personal_playlist_tracks(source_id)
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –ø–ª–µ–π–ª–∏—Å—Ç
            return self.fetch_playlist_tracks(source_id)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –∏–∑ {source_id}: {e}")
            return []
    
    def fetch_album_tracks(self, album_id: str) -> List[Track]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞"""
        try:
            album = self.client.albums_with_tracks(album_id)
            if not album or not album.volumes:
                return []
            
            tracks = []
            for volume in album.volumes:
                for track in volume:
                    try:
                        download_info = track.get_download_info()
                        if not download_info:
                            continue
                        
                        print(f"üéµ –¢—Ä–µ–∫ '{track.title}':")
                        download_url = self.get_best_quality_url(download_info)
                        if not download_url:
                            continue
                        
                        tracks.append(Track(
                            title=track.title,
                            artist=track.artists[0].name if track.artists else "Unknown",
                            url=download_url,
                            duration=track.duration_ms // 1000
                        ))
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ –∞–ª—å–±–æ–º–∞: {e}")
                        continue
            
            return tracks
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª—å–±–æ–º–∞: {e}")
            return []
    
    def fetch_personal_playlist_tracks(self, playlist_id: str) -> List[Track]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            playlists = self.client.users_playlists_list()
            
            # –ò—â–µ–º –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
            target_playlist = None
            for playlist in playlists:
                if (hasattr(playlist, 'uuid') and playlist.uuid == playlist_id) or \
                   (hasattr(playlist, 'kind') and str(playlist.kind) == playlist_id):
                    target_playlist = playlist
                    break
            
            if not target_playlist:
                print(f"–ü–ª–µ–π–ª–∏—Å—Ç {playlist_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
            
            tracks = []
            for track_short in target_playlist.tracks:
                try:
                    track = track_short.track
                    if not track:
                        continue
                    
                    download_info = track.get_download_info()
                    if not download_info:
                        continue
                    
                    download_url = self.get_best_quality_url(download_info)
                    if not download_url:
                        continue
                    
                    tracks.append(Track(
                        title=track.title,
                        artist=track.artists[0].name if track.artists else "Unknown",
                        url=download_url,
                        duration=track.duration_ms // 1000
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
                    continue
            
            return tracks
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return []
    
    def fetch_playlist_tracks(self, playlist_id: str) -> List[Track]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –ø—Ä—è–º—ã–º–∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
            playlist = self.client.users_playlists(playlist_id)
            tracks = []
            
            for track_short in playlist.tracks:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                track = track_short.track
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                download_info = track.get_download_info()
                if not download_info:
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                download_url = self.get_best_quality_url(download_info)
                if not download_url:
                    continue
                
                tracks.append(Track(
                    title=track.title,
                    artist=track.artists[0].name if track.artists else "Unknown",
                    url=download_url,
                    duration=track.duration_ms // 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                ))
            
            return tracks
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return []
    
    def fetch_liked_tracks(self) -> List[Track]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ '–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è' —Å –ø—Ä—è–º—ã–º–∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ "–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è"
            liked_tracks = self.client.users_likes_tracks()
            tracks = []
            
            for track_short in liked_tracks:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                    track = track_short.track
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if not track:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    download_info = track.get_download_info()
                    if not download_info:
                        print(f"‚ö†Ô∏è –¢—Ä–µ–∫ '{track.title}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                        continue
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                    download_url = self.get_best_quality_url(download_info)
                    if not download_url:
                        continue
                    
                    tracks.append(Track(
                        title=track.title,
                        artist=track.artists[0].name if track.artists else "Unknown",
                        url=download_url,
                        duration=track.duration_ms // 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                    ))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {e}")
                    continue
            
            return tracks
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤: {e}")
            return []
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
        try:
            account = self.client.account_status()
            return True
        except:
            return False 