from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from yandex_client import YandexMusicClient
import os
from dotenv import load_dotenv
import requests

load_dotenv()

app = FastAPI(title="Auto DJ API")

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
client = YandexMusicClient(os.getenv('YA_TOKEN'))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
        is_connected = client.test_connection()
        return {"status": "ok", "yandex_connected": is_connected}
    except Exception as e:
        return {"status": "error", "yandex_connected": False, "error": str(e)}

@app.get("/audio-proxy")
async def audio_proxy(url: str):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è mp3 —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    try:
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'audio/webm,audio/ogg,audio/wav,audio/*;q=0.9,application/ogg;q=0.7,video/*;q=0.6,*/*;q=0.5',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'identity',
            'Range': 'bytes=0-',
            'Referer': 'https://music.yandex.ru/',
            'Origin': 'https://music.yandex.ru',
            'Sec-Fetch-Dest': 'audio',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-site',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
        }
        
        print(f"üîó –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º: {url[:50]}...")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å—É
        response = requests.get(url, headers=headers, stream=True, timeout=30)
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
        
        if response.status_code != 200 and response.status_code != 206:
            raise HTTPException(status_code=response.status_code, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–µ–≤—å—é
        if len(response.content) < 1000:
            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ({len(response.content)} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—å—é")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        return StreamingResponse(
            response.iter_content(chunk_size=8192),
            media_type="audio/mpeg",
            headers={
                "Content-Type": "audio/mpeg",
                "Accept-Ranges": "bytes",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, OPTIONS",
                "Access-Control-Allow-Headers": "*",
                "Content-Length": str(len(response.content)),
            }
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")

@app.get("/tracks/{source_id}")
async def get_tracks(source_id: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    try:
        tracks = client.fetch_tracks_universal(source_id)
        if not tracks:
            raise HTTPException(status_code=404, detail="–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        for i, track in enumerate(tracks):
            if track.url:
                print(f"üéµ –¢—Ä–µ–∫ {i+1}: {track.title}")
                print(f"   –î–æ: {track.url[:50]}...")
                track.url = f"/audio-proxy?url={track.url}"
                print(f"   –ü–æ—Å–ª–µ: {track.url[:50]}...")
                track.bpm = None
        
        result = [track.dict() for track in tracks]
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {len(result)} —Ç—Ä–µ–∫–∞–º–∏")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/playlist/{playlist_id}")
async def get_playlist(playlist_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        tracks = client.fetch_playlist_tracks(playlist_id)
        if not tracks:
            raise HTTPException(status_code=404, detail="–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        for track in tracks:
            if track.url:
                track.url = f"/audio-proxy?url={track.url}"
                track.bpm = None
        
        return [track.dict() for track in tracks]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        raise HTTPException(status_code=404, detail="–ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@app.get("/liked")
async def get_liked_tracks():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
    try:
        tracks = client.fetch_liked_tracks()
        if not tracks:
            raise HTTPException(status_code=404, detail="–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        for track in tracks:
            if track.url:
                track.url = f"/audio-proxy?url={track.url}"
                track.bpm = None
        
        return [track.dict() for track in tracks]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–∫–æ–≤: {e}")
        raise HTTPException(status_code=404, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 