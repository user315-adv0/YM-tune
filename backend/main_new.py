from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from yandex_client import YandexMusicClient
import os
from dotenv import load_dotenv
import requests

load_dotenv()

app = FastAPI(title="Auto DJ API")

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
client = YandexMusicClient(os.getenv('YANDEX_TOKEN'))

@app.get("/audio-proxy")
async def audio_proxy(url: str):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'audio/webm,audio/ogg,audio/wav,audio/*;q=0.9,application/ogg;q=0.7,video/*;q=0.6,*/*;q=0.5',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'identity',
            'Range': 'bytes=0-',
            'Referer': 'https://music.yandex.ru/',
            'Origin': 'https://music.yandex.ru'
        }
        
        print("üîó –ó–∞–ø—Ä–æ—Å –∫:", url)
        response = requests.get(url, stream=True, timeout=30, headers=headers)
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üì¶ –†–∞–∑–º–µ—Ä: {len(response.content) if not response.headers.get('content-length') else response.headers.get('content-length')} –±–∞–π—Ç")
        print(f"üéµ Content-Type: {response.headers.get('content-type')}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.content[:500]}")
            raise HTTPException(status_code=response.status_code, detail="–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        content_length = response.headers.get('content-length')
        if content_length and int(content_length) < 1000:
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {content_length} –±–∞–π—Ç")
            print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 –±–∞–π—Ç: {response.content[:200]}")
            print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 –±–∞–π—Ç (hex): {response.content[:200].hex()}")
        
        return StreamingResponse(
            response.iter_content(chunk_size=8192),
            media_type=response.headers.get("content-type", "audio/mpeg"),
            headers={
                "Content-Length": response.headers.get("content-length", ""),
                "Accept-Ranges": "bytes",
                "Cache-Control": "public, max-age=3600"
            }
        )
    except Exception as e:
        import traceback
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {str(e)}")
        print(f"üìã Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {str(e)}")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
        is_connected = client.test_connection()
        return {"status": "ok", "yandex_connected": is_connected}
    except Exception as e:
        return {"status": "error", "yandex_connected": False, "error": str(e)}

@app.get("/tracks/{source_id}")
async def get_tracks(source_id: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    try:
        tracks = client.fetch_tracks_universal(source_id)
        
        if not tracks:
            raise HTTPException(status_code=404, detail="–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä—è–º—ã–µ URL –Ω–∞ –ø—Ä–æ–∫—Å–∏ URL
        for track in tracks:
            if track.url:
                # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º BPM-–∞–Ω–∞–ª–∏–∑
                track.bpm = None
                
                # –ó–∞–º–µ–Ω—è–µ–º URL –Ω–∞ –ø—Ä–æ–∫—Å–∏
                track.url = f"/audio-proxy?url={track.url}"
        
        return [track.dict() for track in tracks]
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 